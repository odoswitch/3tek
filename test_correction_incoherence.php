<?php

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Dotenv\Dotenv;
use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Lot;
use App\Entity\User;
use App\Entity\Commande;
use App\Entity\FileAttente;
use App\Repository\LotRepository;
use App\Repository\UserRepository;
use App\Repository\CommandeRepository;
use App\Repository\FileAttenteRepository;

// Charger les variables d'environnement
$dotenv = new Dotenv();
$dotenv->load(__DIR__ . '/.env');

// Initialiser Symfony
$kernel = new \App\Kernel($_ENV['APP_ENV'] ?? 'dev', (bool) ($_ENV['APP_DEBUG'] ?? true));
$kernel->boot();

$container = $kernel->getContainer();
$entityManager = $container->get('doctrine.orm.entity_manager');

// R√©cup√©rer les repositories
$lotRepository = $entityManager->getRepository(Lot::class);
$userRepository = $entityManager->getRepository(User::class);
$commandeRepository = $entityManager->getRepository(Commande::class);
$fileAttenteRepository = $entityManager->getRepository(FileAttente::class);

echo "=== TEST DE LA CORRECTION D'INCOH√âRENCE ===\n\n";

// Trouver un lot disponible
$lot = $lotRepository->createQueryBuilder('l')
    ->where('l.statut = :statut')
    ->andWhere('l.quantite > 0')
    ->setParameter('statut', 'disponible')
    ->setMaxResults(1)
    ->getQuery()
    ->getOneOrNullResult();

if (!$lot) {
    echo "‚ùå Aucun lot disponible pour le test\n";
    exit(1);
}

echo "‚úÖ Lot utilis√©: {$lot->getName()} (ID: {$lot->getId()})\n";

// Trouver des utilisateurs
$users = $userRepository->createQueryBuilder('u')
    ->setMaxResults(2)
    ->getQuery()
    ->getResult();

$user1 = $users[0];
$user2 = $users[1];

echo "‚úÖ Utilisateurs: {$user1->getEmail()}, {$user2->getEmail()}\n\n";

// Test 1: Cr√©er une commande et ajouter √† la file d'attente
echo "1. CR√âATION COMMANDE ET FILE D'ATTENTE\n";
echo "=======================================\n";

$commande = new Commande();
$commande->setUser($user1);
$commande->setLot($lot);
$commande->setQuantite(1);
$commande->setPrixUnitaire($lot->getPrix());
$commande->setPrixTotal($lot->getPrix());
$commande->setStatut('en_attente');

$entityManager->persist($commande);

// R√©server le lot
$lot->setQuantite(0);
$lot->setStatut('reserve');
$lot->setReservePar($user1);
$lot->setReserveAt(new \DateTimeImmutable());

$entityManager->persist($lot);
$entityManager->flush();

echo "‚úÖ Commande cr√©√©e et lot r√©serv√©\n";

// Ajouter user2 √† la file d'attente
$fileAttente = new FileAttente();
$fileAttente->setLot($lot);
$fileAttente->setUser($user2);
$fileAttente->setPosition($fileAttenteRepository->getNextPosition($lot));

$entityManager->persist($fileAttente);
$entityManager->flush();

echo "‚úÖ User2 ajout√© en position {$fileAttente->getPosition()}\n\n";

// Test 2: Simuler l'annulation via CommandeCrudController (nouvelle logique unifi√©e)
echo "2. ANNULATION AVEC LOGIQUE UNIFI√âE\n";
echo "===================================\n";

// Simuler la logique unifi√©e du service LotLiberationService
echo "üìã Logique unifi√©e LotLiberationService::libererLot():\n";
echo "   - Si quelqu'un en file d'attente : r√©server pour le premier\n";
echo "   - Si personne en file d'attente : rendre disponible pour tous\n";

// Appliquer la logique unifi√©e
$lot->setQuantite(1); // Restaurer la quantit√©

// Chercher le premier utilisateur dans la file d'attente
$premierEnAttente = $fileAttenteRepository->findFirstInQueue($lot);

if ($premierEnAttente) {
    echo "‚úÖ Premier en file d'attente trouv√©: {$premierEnAttente->getUser()->getEmail()}\n";

    // R√©server automatiquement le lot pour le premier utilisateur en file d'attente
    $lot->setStatut('reserve');
    $lot->setReservePar($premierEnAttente->getUser());
    $lot->setReserveAt(new \DateTimeImmutable());

    echo "‚úÖ Lot r√©serv√© automatiquement pour le premier utilisateur de la file\n";

    // Marquer comme notifi√©
    $premierEnAttente->setStatut('notifie');
    $premierEnAttente->setNotifiedAt(new \DateTimeImmutable());
    $entityManager->persist($premierEnAttente);

    echo "‚úÖ Premier utilisateur marqu√© comme notifi√©\n";
} else {
    echo "‚úÖ Aucun utilisateur en file d'attente - lot lib√©r√© pour tous\n";
    $lot->setStatut('disponible');
    $lot->setReservePar(null);
    $lot->setReserveAt(null);
}

$commande->setStatut('annulee');
$entityManager->persist($commande);
$entityManager->persist($lot);
$entityManager->flush();

echo "‚úÖ Annulation appliqu√©e avec logique unifi√©e\n\n";

// Test 3: V√©rifier la coh√©rence
echo "3. V√âRIFICATION DE LA COH√âRENCE\n";
echo "=================================\n";

$lotFinal = $lotRepository->find($lot->getId());
echo "üìä √âtat final du lot:\n";
echo "   - Statut: {$lotFinal->getStatut()}\n";
echo "   - Quantit√©: {$lotFinal->getQuantite()}\n";
echo "   - R√©serv√© par: " . ($lotFinal->getReservePar() ? $lotFinal->getReservePar()->getEmail() : 'Aucun') . "\n";

$filesAttenteFinales = $fileAttenteRepository->findByLot($lotFinal);
echo "\nüìä File d'attente:\n";
foreach ($filesAttenteFinales as $file) {
    echo "   - Position {$file->getPosition()}: {$file->getUser()->getEmail()} (statut: {$file->getStatut()})\n";
}

// Test 4: V√©rifier la disponibilit√© pour user2
echo "\n4. TEST DISPONIBILIT√â POUR USER2\n";
echo "==================================\n";

$estDisponible = $lotFinal->isDisponiblePour($user2);
echo "üìä User2 peut-il commander le lot:\n";
echo "   - M√©thode isDisponiblePour(): " . ($estDisponible ? "‚úÖ OUI" : "‚ùå NON") . "\n";

if ($estDisponible) {
    echo "‚úÖ CORRECT: User2 peut commander le lot (premier en file notifi√©)\n";
} else {
    echo "‚ùå PROBL√àME: User2 ne peut pas commander le lot\n";
}

// Test 5: Simuler le cas sans file d'attente
echo "\n5. TEST CAS SANS FILE D'ATTENTE\n";
echo "===============================\n";

// Cr√©er un nouveau lot pour tester le cas sans file d'attente
$lot2 = $lotRepository->createQueryBuilder('l')
    ->where('l.statut = :statut')
    ->andWhere('l.quantite > 0')
    ->andWhere('l.id != :excludeId')
    ->setParameter('statut', 'disponible')
    ->setParameter('excludeId', $lot->getId())
    ->setMaxResults(1)
    ->getQuery()
    ->getOneOrNullResult();

if ($lot2) {
    echo "‚úÖ Lot 2 utilis√©: {$lot2->getName()} (ID: {$lot2->getId()})\n";

    // Cr√©er une commande
    $commande2 = new Commande();
    $commande2->setUser($user1);
    $commande2->setLot($lot2);
    $commande2->setQuantite(1);
    $commande2->setPrixUnitaire($lot2->getPrix());
    $commande2->setPrixTotal($lot2->getPrix());
    $commande2->setStatut('en_attente');

    $entityManager->persist($commande2);

    // R√©server le lot
    $lot2->setQuantite(0);
    $lot2->setStatut('reserve');
    $lot2->setReservePar($user1);
    $lot2->setReserveAt(new \DateTimeImmutable());

    $entityManager->persist($lot2);
    $entityManager->flush();

    echo "‚úÖ Commande 2 cr√©√©e et lot 2 r√©serv√©\n";

    // Annuler la commande (sans file d'attente)
    $commande2->setStatut('annulee');
    $lot2->setQuantite(1);

    // Simuler la logique unifi√©e
    $premierEnAttente2 = $fileAttenteRepository->findFirstInQueue($lot2);

    if ($premierEnAttente2) {
        echo "‚ö†Ô∏è  Utilisateur en file d'attente trouv√© (inattendu)\n";
    } else {
        echo "‚úÖ Aucun utilisateur en file d'attente - lot lib√©r√© pour tous\n";
        $lot2->setStatut('disponible');
        $lot2->setReservePar(null);
        $lot2->setReserveAt(null);
    }

    $entityManager->persist($commande2);
    $entityManager->persist($lot2);
    $entityManager->flush();

    echo "‚úÖ Annulation appliqu√©e (cas sans file d'attente)\n";

    // V√©rifier l'√©tat final
    $lot2Final = $lotRepository->find($lot2->getId());
    echo "üìä √âtat final du lot 2:\n";
    echo "   - Statut: {$lot2Final->getStatut()}\n";
    echo "   - Quantit√©: {$lot2Final->getQuantite()}\n";
    echo "   - R√©serv√© par: " . ($lot2Final->getReservePar() ? $lot2Final->getReservePar()->getEmail() : 'Aucun') . "\n";

    if ($lot2Final->getStatut() === 'disponible' && $lot2Final->getReservePar() === null) {
        echo "‚úÖ CORRECT: Lot 2 lib√©r√© pour tous (pas de file d'attente)\n";
    } else {
        echo "‚ùå PROBL√àME: Lot 2 pas correctement lib√©r√©\n";
    }
} else {
    echo "‚ö†Ô∏è  Pas de deuxi√®me lot disponible pour le test\n";
}

echo "\n=== R√âSULTAT DU TEST DE CORRECTION ===\n";

echo "‚úÖ CORRECTION APPLIQU√âE:\n";
echo "   - Logique unifi√©e dans LotLiberationService\n";
echo "   - CommandeCrudController utilise le service unifi√©\n";
echo "   - CommandeDeleteListener utilise le service unifi√©\n";
echo "   - Comportement coh√©rent dans tous les cas\n";

echo "\n‚úÖ AVANTAGES DE LA CORRECTION:\n";
echo "   - Plus d'incoh√©rence entre les m√©thodes d'annulation\n";
echo "   - Comportement pr√©visible et logique\n";
echo "   - Code centralis√© et maintenable\n";
echo "   - Gestion coh√©rente des notifications\n";

echo "\n=== FIN DU TEST DE CORRECTION ===\n";

