╔═══════════════════════════════════════════════════════════════╗
║                                                               ║
║        🐳 DEPLOIEMENT DOCKER - 3TEK - CONFIGURATION PRETE     ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝

📋 FICHIERS CREES
═════════════════

✅ Configuration Docker :
   - Dockerfile (multi-stage optimisé)
   - docker-entrypoint.sh (initialisation auto)
   - compose.yaml (configuration principale)
   - compose.override.yaml (développement)
   - docker-compose.prod.yaml (production)
   - .dockerignore (optimisation)
   - .env.prod.example (template production)

✅ Documentation :
   - DOCKER_README.md (documentation complète)
   - QUICK_START.md (démarrage rapide)
   - DEPLOIEMENT_DOCKER.md (récapitulatif)

✅ Utilitaires :
   - Makefile (commandes simplifiées)
   - start-dev.bat (démarrage Windows)
   - stop-dev.bat (arrêt Windows)

═════════════════════════════════════════════════════════════════

🚀 DEMARRAGE RAPIDE
═══════════════════

WINDOWS :
---------
1. Assurez-vous que Docker Desktop est installé et démarré
2. Double-cliquez sur : start-dev.bat
3. Attendez que les conteneurs démarrent
4. Ouvrez : http://localhost:8080

LINUX/MAC :
-----------
1. Assurez-vous que Docker est installé
2. Exécutez : make dev
   OU : docker compose -f compose.yaml -f compose.override.yaml up -d
3. Attendez que les conteneurs démarrent
4. Ouvrez : http://localhost:8080

═════════════════════════════════════════════════════════════════

🌐 URLS DISPONIBLES (Développement)
════════════════════════════════════

Application web :  http://localhost:8080
PhpMyAdmin :       http://localhost:8081
  - User: root
  - Password: ngamba123

Mailpit (emails) : http://localhost:8025

═════════════════════════════════════════════════════════════════

⚙️ PREMIERE INSTALLATION
═════════════════════════

Après le premier démarrage, exécutez :

make install

OU manuellement :

docker compose exec php composer install
docker compose exec php php bin/console doctrine:database:create --if-not-exists
docker compose exec php php bin/console doctrine:migrations:migrate --no-interaction
docker compose exec php php bin/console assets:install

═════════════════════════════════════════════════════════════════

📝 COMMANDES UTILES
═══════════════════

Avec Make (recommandé) :
------------------------
make dev              # Démarrer en développement
make dev-down         # Arrêter
make logs             # Voir les logs
make shell            # Accéder au shell PHP
make migrate          # Exécuter les migrations
make cache-clear      # Vider le cache
make install          # Installation complète

Sans Make :
-----------
docker compose up -d                              # Démarrer
docker compose down                               # Arrêter
docker compose logs -f                            # Logs
docker compose exec php bash                      # Shell
docker compose exec php php bin/console [cmd]    # Commande Symfony

═════════════════════════════════════════════════════════════════

🔒 DEPLOIEMENT EN PRODUCTION
═════════════════════════════

1. Copiez le fichier d'environnement :
   cp .env.prod.example .env.prod

2. Éditez .env.prod et changez :
   - APP_SECRET (générez une clé aléatoire)
   - MYSQL_ROOT_PASSWORD
   - MYSQL_PASSWORD
   - DATABASE_URL
   - MAILER_DSN

3. Lancez en production :
   docker compose -f docker-compose.prod.yaml --env-file .env.prod up -d

═════════════════════════════════════════════════════════════════

🐛 DEPANNAGE
════════════

Problème : Docker ne démarre pas
Solution : Vérifiez que Docker Desktop est lancé

Problème : Port 8080 déjà utilisé
Solution : Modifiez le port dans compose.override.yaml

Problème : Erreur de permissions
Solution : make fix-permissions

Problème : Base de données inaccessible
Solution : docker compose restart database

Voir les logs : make logs

═════════════════════════════════════════════════════════════════

📚 DOCUMENTATION
════════════════

Pour plus de détails, consultez :

1. QUICK_START.md - Guide de démarrage rapide
2. DOCKER_README.md - Documentation complète
3. DEPLOIEMENT_DOCKER.md - Récapitulatif technique

═════════════════════════════════════════════════════════════════

✨ FONCTIONNALITES
══════════════════

✅ Multi-stage build (image optimisée)
✅ Auto-initialisation (migrations, cache, permissions)
✅ Hot-reload en développement
✅ PhpMyAdmin intégré
✅ Mailpit pour tester les emails
✅ Configuration séparée dev/prod
✅ Scripts de démarrage Windows
✅ Makefile avec commandes simplifiées
✅ Health checks pour MySQL
✅ Logs centralisés

═════════════════════════════════════════════════════════════════

🎯 PROCHAINES ETAPES
════════════════════

1. ✅ Configuration Docker créée
2. ⏭️ Démarrer l'environnement (start-dev.bat ou make dev)
3. ⏭️ Exécuter l'installation (make install)
4. ⏭️ Accéder à l'application (http://localhost:8080)
5. ⏭️ Créer votre premier utilisateur admin
6. ⏭️ Commencer le développement !

═════════════════════════════════════════════════════════════════

💡 ASTUCES
══════════

- Utilisez "make help" pour voir toutes les commandes disponibles
- Les logs sont dans var/log/
- Les uploads sont dans public/uploads/
- Le cache est dans var/cache/
- Utilisez Mailpit pour voir tous les emails envoyés
- PhpMyAdmin pour gérer la base de données facilement

═════════════════════════════════════════════════════════════════

🆘 SUPPORT
══════════

En cas de problème :
1. Vérifiez les logs : make logs
2. Consultez DOCKER_README.md
3. Vérifiez que Docker Desktop est bien lancé
4. Redémarrez les conteneurs : make restart

═════════════════════════════════════════════════════════════════

Bon développement ! 🚀

═════════════════════════════════════════════════════════════════
