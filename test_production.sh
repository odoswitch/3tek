#!/bin/bash

# Script de test en mode production
# Usage: ./test_production.sh

echo "üöÄ Test de l'application en mode production"
echo "=========================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de test
test_command() {
    local command=$1
    local description=$2
    
    echo -n "‚è≥ $description... "
    
    if eval "$command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì OK${NC}"
        return 0
    else
        echo -e "${RED}‚úó ERREUR${NC}"
        return 1
    fi
}

# 1. V√©rifier l'environnement
echo "üìã V√©rification de l'environnement"
echo "-----------------------------------"

if grep -q "APP_ENV=prod" .env; then
    echo -e "${GREEN}‚úì${NC} Mode production activ√©"
else
    echo -e "${RED}‚úó${NC} Mode production NON activ√©"
    echo -e "${YELLOW}‚ö†${NC}  Modifier APP_ENV=prod dans .env"
fi

if grep -q "APP_DEBUG=0" .env; then
    echo -e "${GREEN}‚úì${NC} Debug d√©sactiv√©"
else
    echo -e "${YELLOW}‚ö†${NC}  Debug devrait √™tre √† 0 en production"
fi

echo ""

# 2. Tests Symfony
echo "üîß Tests Symfony"
echo "----------------"

test_command "docker compose exec php php bin/console about --env=prod" "Informations Symfony"
test_command "docker compose exec php php bin/console doctrine:schema:validate --env=prod" "Validation sch√©ma base de donn√©es"
test_command "docker compose exec php php bin/console debug:router --env=prod | head -n 5" "Routes disponibles"

echo ""

# 3. Tests cache
echo "üíæ Tests cache"
echo "--------------"

echo "‚è≥ Nettoyage du cache..."
docker compose exec php php bin/console cache:clear --env=prod --no-warmup
echo -e "${GREEN}‚úì${NC} Cache nettoy√©"

echo "‚è≥ R√©chauffement du cache..."
docker compose exec php php bin/console cache:warmup --env=prod
echo -e "${GREEN}‚úì${NC} Cache r√©chauff√©"

echo ""

# 4. Tests base de donn√©es
echo "üóÑÔ∏è  Tests base de donn√©es"
echo "-------------------------"

test_command "docker compose exec php php bin/console doctrine:query:sql 'SELECT 1' --env=prod" "Connexion base de donn√©es"
test_command "docker compose exec php php bin/console doctrine:query:sql 'SELECT COUNT(*) FROM user' --env=prod" "Comptage utilisateurs"
test_command "docker compose exec php php bin/console doctrine:query:sql 'SELECT COUNT(*) FROM lot' --env=prod" "Comptage lots"

echo ""

# 5. Tests permissions
echo "üîê Tests permissions"
echo "--------------------"

if [ -w "var/cache" ]; then
    echo -e "${GREEN}‚úì${NC} var/cache accessible en √©criture"
else
    echo -e "${RED}‚úó${NC} var/cache NON accessible en √©criture"
fi

if [ -w "var/log" ]; then
    echo -e "${GREEN}‚úì${NC} var/log accessible en √©criture"
else
    echo -e "${RED}‚úó${NC} var/log NON accessible en √©criture"
fi

if [ -w "public/uploads" ]; then
    echo -e "${GREEN}‚úì${NC} public/uploads accessible en √©criture"
else
    echo -e "${RED}‚úó${NC} public/uploads NON accessible en √©criture"
fi

echo ""

# 6. Tests fichiers critiques
echo "üìÅ Tests fichiers critiques"
echo "---------------------------"

files=(".env" "composer.json" "public/index.php" "config/packages/doctrine.yaml")

for file in "${files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì${NC} $file existe"
    else
        echo -e "${RED}‚úó${NC} $file MANQUANT"
    fi
done

echo ""

# 7. Tests s√©curit√©
echo "üîí Tests s√©curit√©"
echo "-----------------"

if grep -q "APP_SECRET=31a1dc0a4d2977405a7293b0c56c06fa" .env; then
    echo -e "${YELLOW}‚ö†${NC}  APP_SECRET par d√©faut d√©tect√© - CHANGER EN PRODUCTION"
else
    echo -e "${GREEN}‚úì${NC} APP_SECRET personnalis√©"
fi

if [ -f ".env.local" ]; then
    echo -e "${YELLOW}‚ö†${NC}  .env.local existe - v√©rifier qu'il n'est pas commit√©"
fi

echo ""

# 8. Tests URLs (si serveur lanc√©)
echo "üåê Tests URLs"
echo "-------------"

if curl -s http://localhost:8080 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC} Serveur accessible"
    
    # Test page d'accueil
    if curl -s http://localhost:8080 | grep -q "3Tek"; then
        echo -e "${GREEN}‚úì${NC} Page d'accueil OK"
    else
        echo -e "${RED}‚úó${NC} Page d'accueil KO"
    fi
    
    # Test page 404
    if curl -s http://localhost:8080/page-inexistante | grep -q "404"; then
        echo -e "${GREEN}‚úì${NC} Page 404 personnalis√©e OK"
    else
        echo -e "${YELLOW}‚ö†${NC}  Page 404 √† v√©rifier"
    fi
else
    echo -e "${YELLOW}‚ö†${NC}  Serveur non accessible (normal si non d√©marr√©)"
fi

echo ""

# 9. R√©sum√©
echo "üìä R√©sum√©"
echo "========="
echo ""
echo -e "${GREEN}‚úì${NC} Tests termin√©s"
echo ""
echo "Actions recommand√©es avant d√©ploiement :"
echo "1. V√©rifier que APP_SECRET est unique"
echo "2. Configurer les vraies informations de base de donn√©es"
echo "3. Configurer le MAILER_DSN avec les vrais identifiants"
echo "4. Tester l'envoi d'emails"
echo "5. V√©rifier les pages d'erreur (404, 500)"
echo "6. Faire un backup de la base de donn√©es"
echo ""
echo "Pour revenir en mode d√©veloppement :"
echo "  Changer APP_ENV=dev dans .env"
echo "  Puis: docker compose exec php php bin/console cache:clear"
echo ""
